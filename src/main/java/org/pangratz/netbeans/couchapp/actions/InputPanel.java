/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InputPanel.java
 *
 * Created on 06.04.2011, 08:48:59
 */
package org.pangratz.netbeans.couchapp.actions;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

/**
 *
 * @author clemens
 */
public class InputPanel extends javax.swing.JPanel implements DocumentListener {

    /** Creates new form InputPanel */
    public InputPanel() {
        initComponents();

        errorMessageLabel.setVisible(false);

        Document doc = inputTextField.getDocument();
        doc.addDocumentListener(this);
    }
    private TextFieldChangeListener textFieldChangeListener;

    public void setTextFieldChangeListener(TextFieldChangeListener textFieldChangeListener) {
        this.textFieldChangeListener = textFieldChangeListener;
    }

    public String getValue() {
        return this.inputTextField.getText();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        errorMessageLabel = new javax.swing.JLabel();

        messageLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.messageLabel.text")); // NOI18N

        inputTextField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.inputTextField.text")); // NOI18N

        errorMessageLabel.setForeground(new java.awt.Color(153, 0, 0));
        errorMessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        errorMessageLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.errorMessageLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(inputTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .add(messageLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, errorMessageLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(messageLabel)
                .add(18, 18, 18)
                .add(inputTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(errorMessageLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel messageLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent de) {
        checkValidValue();
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        checkValidValue();
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        checkValidValue();
    }

    protected void checkValidValue() {
        String value = inputTextField.getText();
        String errorMsg = textFieldChangeListener.isValid(value);
        if (errorMsg == null) {
            errorMessageLabel.setVisible(false);
        } else {
            errorMessageLabel.setText(errorMsg);
            errorMessageLabel.setVisible(true);
        }
    }

    public void setMessage(String msg) {
        this.messageLabel.setText(msg);
    }
}
